1. CREATE PROJECT

	A. Create the project folder and subfolders use the command

		i. django-admin startproject Proyecto_JJSAS
	
	B. Create the first application to manage the html layout, homepage with all articles to display, each individual article, and new articles to post.

		i. python3 manage.py startapp inventarios
	
	C. Register the application blog in proyecto_JJSAS/settings.py
		
		INSTALLED_APPS = [
			'inventarios',
			'django.contrib.admin',
			.
			.
			.
		]
	
	D. Create the route to the application urls.py file of each application in proyectoJJSAS/urls.py
		
		from django.contrib import admin
		from django.urls import path, include
		from django.contrib.staticfiles.urls import staticfiles_urlpatterns
		from django.conf.urls.static import static
		from django.conf import settings
		from inventarios import views


		urlpatterns = [
			path('admin/', admin.site.urls),
			path('inventarios/', include('inventarios.urls')),
		]
		
	E. In the folder "inventarios`" created in the B step, create a new file called urls.py and include the following information.
	
		from django.urls import path
		from . import views


		# Namespace para evitar conflicto entre urls llamadas igual pero en diferentes aplicaciones
		app_name = "inventarios"

		urlpatterns = [
			
		]
		
	F. The file articulos/views.py will manage the actions taken every time a url path is taken. This will be explained when actions are added througout this document.
	

2. CREATE THE MODELS FOR THE DATABASE TABLE in inventarios/models.py

	from django.db import models
	from django.contrib.auth.models import User
	from django.contrib.auth.models import AbstractUser
	from django.db.models.fields.related import ManyToManyField


	# Create your models here.
	# Modelo modificado para usuarios en admin
	class CustomUser(AbstractUser):
		codigo_empleado = models.BigIntegerField(
		    default="0000000000")  # llave primaria
		# Diccionario de las opciones de cargos para mostrar en admin
		cargos = [
		    ("Gerente General", "Director General"),
		    ("Director Operacional", "Director Operacional"),
		    ("Almacenista", "Almacenista"),
		    ("Contratista", "Contratista"),
		    ("NA", "No Asignado")
		]
		# choices toma los valores de la lista cargos (arriba declarada) y crea una
		# lista desplegable de los cargos en admin
		cargo_empleado = models.CharField(
		    max_length=50, choices=cargos, default="NA")
		telefono_empleado = models.BigIntegerField(default="0000000000")
		correo_empleado = models.CharField(
		    max_length=50, default="empleado@ejemplo.com")


	# Usada para guardar registro de los movimientos de entrada o salida de materia
	# prima del almacén
	class Movimientos_Almacen (models.Model):
		cod_movimiento = models.IntegerField(primary_key=True)  # llave primaria
		# Diccionario de las opciones de cargos para mostrar en admin
		movimientos = [
		    ("En", "Entrada"),
		    ("Sa", "Salida"),
		    ("Na", "Sin Asignar Aún")
		]
		tipo_movimiento = models.CharField(
		    max_length=8, choices=movimientos, default="Na")


	# Registro de proveedores
	class Proveedores (models.Model):
		codigo_proveedor = models.IntegerField(primary_key=True)  # llave primaria
		nombre_proveedor = models.CharField(max_length=50)
		direccion_proveedor = models.CharField(max_length=100)
		barrio_proveedor = models.CharField(max_length=50)
		ciudad_proveedor = models.CharField(max_length=50)
		telefono_proveedor = models.IntegerField()
		website_proveedor = models.CharField(max_length=50)
		# Diccionario de las opciones disponibles de crédito para mostrar en admin
		credito = [
		    ("Si", "Si Maneja Crédito"),
		    ("No", "No Ofrece Crédito"),
		]
		# choices toma los valores de la lista cargos (arriba declarada) y crea una
		# lista desplegable de las opciones de crédito
		maneja_credito = models.CharField(
		    max_length=20, choices=credito, default="No")


	# Usada para registrar los ingresos de materias primas al almacén
	class Materia_prima (models.Model):
		codigo_producto = models.IntegerField(primary_key=True)  # llave primaria
		nombre_producto = models.CharField(max_length=100)
		numero_factura_compra = models.CharField(
		    max_length=100, default="0000000000")
		cantidad = models.IntegerField(default="1")
		unidades = [
		    ("Un", "Unidad"), ("Lb", "Libras"), ("Kg", "Kilogramos"),
		    ("In", "Pulgadas"), ("Cm", "Centimetros"), ("Mt", "Metros"),
		    ("Pi", "Pies"), ("M2", "Metros Cuadrados"), ("M3", "Metros Cubicos"),
		    ("Lt", "Litros"), ("Ml", "Mililitros"), ("Gl", "Galones"),
		    ("1/16", "1/16 de Galón"), ("1/8", "1/8 de Galón"),
		    ("1/4", "1/4 de Galón"), ("1/2", "1/2 Galón"),
		]
		unidad_de_medida = models.CharField(
		    max_length=15, choices=unidades, default="Un")
		precio = models.IntegerField()
		marca = models.CharField(max_length=100, null=True)
		Proveedores_cod_proveedor = models.ForeignKey(
		    Proveedores, null=False, on_delete=models.CASCADE)
		# Muchos productos pueden tener muchos movimientos de almacén y viceversa
		cod_movimiento_ingreso = ManyToManyField(Movimientos_Almacen)


	# Usada cuando el empleado encargado de un proyecto solicita materia prima al
	# alamacén
	class Ordenes_pedido_materiaprima (models.Model):
		codigo_orden_pedido = models.IntegerField(
		    primary_key=True)  # llave primaria
		codigo_producto = models.ForeignKey(
		    Materia_prima, null=False, on_delete=models.CASCADE)  # llave foranea
		cantidad_pedida = models.IntegerField()
		fecha_orden_pedido = models.DateTimeField(auto_now_add=True)
		empleado_solicitante = models.ForeignKey(
		    CustomUser, null=False, on_delete=models.CASCADE, default="-------")  # llave foranea


	# Registro de los proyectos que tiene la compañía
	class Proyectos (models.Model):
		codigo_proyecto = models.IntegerField(primary_key=True)  # llave primaria
		direccion_proyecto = models.CharField(max_length=100)
		descripcion_proyecto = models.CharField(max_length=200)
		estado = [
		    ("Act", "Activo"),
		    ("Ter", "Terminado"),
		    ("Na", "No Asignado"),
		]
		estado_proyecto = models.CharField(
		    max_length=12, choices=estado, default="Na")
		empleado_responsable = models.ForeignKey(
		    CustomUser, null=False, on_delete=models.CASCADE)  # llave foranea


	# Usada para registrar las salidas de material del almacén
	class Ordenes_salida_materiaprima (models.Model):
		codigo_orden_salida = models.IntegerField(
		    primary_key=True)  # llave primaria
		codigo_producto = models.IntegerField()  # llave foranea
		cantidad_entregada = models.IntegerField()
		fecha_entrega_materiaprima = models.DateTimeField(auto_now_add=True)
		proyecto_destino = models.ForeignKey(
		    Proyectos, null=False, on_delete=models.CASCADE)  # llave foranea
		empleado_responsable = models.ForeignKey(
		    CustomUser, null=False, on_delete=models.CASCADE)  # llave foranea
		# Muchos productos pueden tener muchos movimientos de almacén y viceversa
		cod_movimiento_salida = ManyToManyField(Movimientos_Almacen)


	# Registro de contratistas
	class Contratistas (models.Model):
		codigo_contratista = models.IntegerField(
		    primary_key=True)  # llave primaria
		nombre_contratista = models.CharField(max_length=50)
		direccion_contratista = models.CharField(max_length=100)
		correo_contratista = models.CharField(max_length=50)
		telefono_contratista = models.IntegerField()
		especialidad_contratista = models.CharField(max_length=50)
		proyecto_asignacion = models.ForeignKey(
		    Proyectos, null=False, on_delete=models.CASCADE)  # Llave foranea


3. CHANGE THE TIME_ZONE AND LANGUAGE_CODE IN proyecto_JJSAS/settings.py:

	# Internationalization
	# https://docs.djangoproject.com/en/3.2/topics/i18n/

	LANGUAGE_CODE = 'es-co'

	TIME_ZONE = 'America/Bogota'	

		    
4. MIGRATE (Each time you make major changes to the model)

	i. Migrate updates the changes on the application database
	
		a. python3 manage.py makemigrations
	
		b. python3 manage.py migrate
	
	Note: The changes will be registered inside inventarios/migrations. Every time a migration is done, a new file is created inside this folder with the registered changes.    
		    
		    
5. CREATE A SUPERUSER TO HANDLE THE ADMIN SECTION

	i. python3 manage.py createsuperuser
	
	ii. Create username
	
	iii. Email: salvadororjuela@gmail.com 
	
	iv. Create password: !@#$....
	
	v. Confirm password
	

6. REGISTER THE MODELS INTO inventarios/admin.py TO UPDATE THE ADMIN SECTION OF DJANGO
	
	# Modificar la vista por defecto de usuarios en admin
	class CustomUserAdmin(UserAdmin):
		
		# Listado de los campos a mostrar en admin.
		list_display = (
		    'username', 'codigo_empleado', 'first_name', 'last_name', 'is_staff',
		    'cargo_empleado', 'telefono_empleado', 'correo_empleado'
		)

		# campos para mostrar datos de los usuarios registrados
		fieldsets = (
		    (None, {
		        'fields': ('username', 'password')
		    }),
		    ('Informacion Personal', {
		        'fields': ('first_name', 'last_name', 'email')
		    }),
		    ('Permisos', {
		        'fields': (
		            'is_active', 'is_staff', 'is_superuser',
		            'groups', 'user_permissions'
		        )
		    }),
		    ('Fechas Importantes', {
		        'fields': ('last_login', 'date_joined')
		    }),
		    ('Informacion adicional', {
		        'fields': ('codigo_empleado', 'cargo_empleado', 'telefono_empleado')
		    })
		)

		# Campos para agregar datos de nuevos usuarios
		add_fieldsets = (
		    (None, {
		        # Password1 y password2 requeridas para confirmacion de contrasena
		        'fields': ('username', 'password1', 'password2')
		    }),
		    ('Informacion Personal', {
		        'fields': ('first_name', 'last_name', 'email')
		    }),
		    ('Permisos', {
		        'fields': (
		            'is_active', 'is_staff', 'is_superuser',
		            'groups', 'user_permissions'
		        )
		    }),
		    ('Fechas Importantes', {
		        'fields': ('last_login', 'date_joined')
		    }),
		    ('Informacion adicional', {
		        'fields': ('codigo_empleado', 'cargo_empleado', 'telefono_empleado')
		    })
		)

	
7. CREATE THE DIRECTORY FOR THE STATIC FILES (inventarios/static/inventarios)
	
	i. Paste inside this directory the file styles.css
	
	ii. Paste the pictures to use in the html files.
	

8. CREATE THE FILE inventarios/templates/inventarios/layout.html
	
	{% load static %}

	<!DOCTYPE html>
	<html lang="es">
	<head>
		<meta charset="UTF-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title> 
		    {% block title %} {% endblock %}
		</title>
		<link rel="stylesheet" href="{% static 'inventarios/styles.css' %}?{% now 'U' %}">
		<link href ="https://file.myfontastic.com/KL3SN5cnuidMLxZSwWuarG/icons.css" rel = "hoja de estilo">
		<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Sofia&effect=neon|outline|emboss|shadow-multiple">
	   
	</head>
	<body>
		<header>
		    <div class="contenedor">
		        <img class="main_logo" src="{% static 'inventarios/Logo_J&J2.png' %}">
		        <input type= "checkbox" id="menu-bar">
		        <label class="icon-menu" for="menu-bar"></label>
		        <nav class="menu">
		            <a href="{% url 'index' %}" class="">Inicio</a>
		            <a href="{% url 'inventarios:mision' %}" class="href">Mision</a>
		            <a href="{% url 'inventarios:vision' %}" class="href">Vision</a>
		            <a href="{% url 'inventarios:contacto' %}">Contacto</a>
		            <a href="{% url 'inventarios:ingresar' %}" class="href">Ingresar</a>
		        </nav>
		    </div>    
		</header>
		<main>
		<section id="portada">
		    <img src="{% static 'inventarios/port.jpeg' %}">
		    <div class="contenedor">
		        <h2 class="font-effect-shadow-multiple">LOS MEJORES TRABAJOS CON LA MEJOR CALIDAD</h2>
		        <p class="font-effect-shadow-multiple">NUESTRA COMPAÑIA TRABAJA CON LOS MEJORES MATERIALES Y OFRECE 
		        TRABAJOS GRANTIZADOS PARA SATISFACER A LOS CLIENTES MÁS EXIGENTES</p>
		    </div>
		</section>

		<!--Espacio para inyectar el contenido unico de cada pagina -->
		<div class="main">
		{% block main %}
		    {% block icon %}
		    {% endblock %}
		{% endblock %}  
		</div>  
		<hr>
		<br>

		<section id="bien">

		    <h3>NUESTRA MANO DE OBRA</h3>
		    <div class="contenedor">
		        <article>
		            <img src="{% static 'inventarios/foto1.jpeg' %}">
		        </article>

		        <article>
		            <img src="{% static 'inventarios/foto2.jpeg' %}">
		        </article>

		        <article>
		            <img src="{% static 'inventarios/foto3.jpeg' %}">
		        </article>
		    </div>
		</section>
		        
		    </section>
		    <section id="info">
		        <h3>NUESTROS MATERIALES</h3>
		        <div class="contenedor">
		        <div class="info-m">
		            <img src="{% static 'inventarios/img1.jpeg' %}">
		            <h4>Varillas de hierro</h4>
		        </div>   

		        <div class="info-m">
		            <img src="{% static 'inventarios/img2.jpeg' %}">
		            <h4>Tornillos de bronce</h4>
		        </div> 

		        <div class="info-m">
		            <img src="{% static 'inventarios/img3.jpeg' %}">
		            <h4>Tornillos de acero</h4> 
		        </div>  

		        <div class="info-m">
		            <img src="{% static 'inventarios/img4.jpeg' %}">
		            <h4>Cables de aluminio</h3>
		        </div>              
		        </div>
		    </section>
		</main>
		<footer>
		    <div class="contenedor">
		        <div class="copy">
		        <pre class="copy">COPYRIGHT © 2021 Proyectos Y Construcciones J&J S.A.S</pre> 
		            <pre>Ciudad:Ibague-Tolima</pre>
		            <pre>Telefono:748-92-12</pre> 
		            <pre>Direccion: calle 11 Nª 15-50</pre> 
		            <pre id="correo">Correo:j&jconstruyproyec@hotmail.com</pre></div></p>
		        <div class="redessociales">
		            <a class="icon-facebook" href="https://www.facebook.com" target="_blank"></a>
		            <a class="icon-twitter" href="http://www.twitter.com" target="_blank"></a>
		            <a class="icon-youtube" href="http://www.youtube.com" target="_blank"></a>
		            <a class="icon-instagram" href="http://www.instagram.com" target="_blank"></a>
		            <a class="icon-whatsapp" href="http://www.whatsapp.com" target="_blank"></a>
		        </div>
		    </div>
		</footer>
		<script src="{% static 'inventarios/script.js' %}"></script>
	</body>
	</html>

9. CREATE THE INITIAL VIEWS FOR THE URLS IN inventarios/views.py
	
	from django.shortcuts import render


	# Create your views here.
	def index(request):
		return render(request, "inventarios/index.html")


	def mision(request):
		return render(request, "inventarios/mision.html")


	def vision(request):
		return render(request, "inventarios/vision.html")


	def contacto(request):
		return render(request, "inventarios/contacto.html")


	def ingresar(request):
		return render(request, "inventarios/ingresar.html")


10. CREATE THE PATHS FOR THE URLS IN inventarios/urls.py, AND GIVE THE APPROPRIATE NAMESPACE

	from django.urls import path
	from . import views


	# Namespace para evitar conflicto entre urls llamadas igual pero en diferentes
	# aplicaciones
	app_name = "inventarios"

	urlpatterns = [
		# Camino a la pagina principal de la empresa
		path("", views.index, name="index"),
		path("mision", views.mision, name="mision"),
		path("vision", views.vision, name="vision"),
		path("contacto", views.contacto, name="contacto"),
		path("ingresar", views.ingresar, name="ingresar"),
	]


11. CREATE THE inventarios/templates/inventarios/index.html FILE.
	
	{% extends "inventarios/layout.html" %}  

	{% block title %}
		Sobre Nosotros
	{% endblock %}

	 {% block main %}
		<section id="b">
		    <h2>QUIENES SOMOS</h2>
		    <p>Proyectos y Construcciones J&J S.A.S. 
		    Es una empresa que fue constituida como sociedad por acciones simplificadas 
		    simples desde agosto de 2017 y se dedica a realizar carpintería en aluminio 
		    en mayor y en menor medida a obras civiles
		    (remodelación y mantenimiento de inmuebles). </p>  
		    <br><br><br><br>
		</section>
	{% endblock %}


12. MAKE "index" THE DIRECT URL WHEN ACCESSING TO http://127.0.0.1:8000/

	i. Include in "urlpatterns" in proyecto_JJSAS/urls.py the following path:
	
		# Redirecciona como pagina principal a la url http://127.0.0.1:8000/
	    path("", views.index, name="index"),
	    

13. CREATE THE inventarios/templates/inventarios/mision.html FILE.

	{% extends "inventarios/layout.html" %}

	{% block title %}
		Misión
	{% endblock %}

	{% block main %}
		<section id="b">
		    <h2>MISIÓN</h2>
		    <p>Es una sociedad del sector de la construcción, dedicada a ofrecer
		        servicios de carpintería en aluminio, obra civil, remodelación y
		        adecuación de inmuebles; satisfaciendo de este modo las necesidades
		        de los clientes antes, durante y después de finalizado el proyecto;
		        contando con un personal que reúne excelentes cualidades humanas y
		        profesionales, considerados como el mayor recurso de este modo
		        comprometida para garantizarles una justa remuneración.Se encuentra
		        en la firme búsqueda de establecer relaciones duraderas con los
		        clientes y proveedores, que le permitan contribuir al desarrollo del
		        país fomentando la preservación del medio ambiente y la generación
		        de empleo calificado.</p>  
		</section>       

		<div class="slideshow-contenedor">
		    <div class="slide desvanece">
		        <div class="textoimg">1 / 8</div>
		        <img src="/static/inventarios/pic1.jpeg" style="width:100%">
		    </div>

		    <div class="slide desvanece">
		        <div class="textoimg">2 / 8</div>
		        <img src="/static/inventarios/pic2.jpeg" style="width:100%">
		    </div>

		    <div class="slide desvanece">
		        <div class="textoimg">3 / 8</div>
		        <img src="/static/inventarios/pic3.jpeg" style="width:100%">
		    </div>

		    <div class="slide desvanece">
		        <div class="textoimg">4 / 8</div>
		        <img src="/static/inventarios/pic4.jpeg" style="width:100%">
		    </div>

		    <div class="slide desvanece">
		        <div class="textoimg">5 / 8</div>
		        <img src="/static/inventarios/pic5.jpeg" style="width:100%">
		    </div>

		    <div class="slide desvanece">
		        <div class="textoimg">6 / 8</div>
		        <img src="/static/inventarios/pic6.jpeg" style="width:100%">
		    </div>

		    <div class="slide desvanece">
		        <div class="textoimg">7 / 8</div>
		        <img src="/static/inventarios/pic7.jpeg" style="width:100%">
		    </div>

		    <div class="slide desvanece">
		        <div class="textoimg">8 / 8</div>
		        <img src="/static/inventarios/pic8.jpeg" style="width:100%">
		    </div>
		</div>
		<br>

		<div class="puntos">
		    <span class="punto"></span> 
		    <span class="punto"></span> 
		    <span class="punto"></span>
		    <span class="punto"></span> 
		    <span class="punto"></span> 
		    <span class="punto"></span>
		    <span class="punto"></span> 
		    <span class="punto"></span> 
		</div>
		<br>
	{% endblock %}
	    

14. CREATE THE inventarios/templates/inventarios/vision.html FILE.

	{% extends "inventarios/layout.html" %}

	{% block title %}
		Visión
	{% endblock%}

	{% block main %}
		<section id="b">
		    <h2>VISIÓN</h2>
		    <p>Para el 2022, ser una sociedad del gremio de la construcción
		    con gran   reconocimiento a nivel local, destacada por anticipar
		    las expectativas y necesidades de los clientes, esto a través del
		    desarrollo de los proyectos en tiempos óptimos; apoyados en el
		    activo más importante el personal, insistentes en la mejora continua
		    de los procesos y de este modo poder ofrecer siempre servicios de
		    calidad a los clientes.</p>  
		</section>
		<div class="video-contenedor">
		    <video controls autoplay loop>
		        <source src="/static/inventarios/video1.webm" type="video/webm">
		        Your browser does not support the video tag.
		    </video>
		</div>
		<div style="height: 300px;"></div>
	{% endblock %}
		 

15. UPDATE AND INSERT IN inventarios/views.py THE VIEW FOR USERS TO LOG IN, LOG OUT, AND IMPORT THE LIBRARIES TO USE THE AuthenticationForm.

	from django.shortcuts import render
	from django.shortcuts import render
	# Importa para crear el formulario de autenticacion de usuarios.
	from django.contrib.auth.forms import AuthenticationForm
	# Importa para usar las funciones de log in y log out.
	from django.contrib.auth import login, logout


	# Create your views here.
	def index(request):
		return render(request, "inventarios/index.html")


	def mision(request):
		return render(request, "inventarios/mision.html")


	def vision(request):
		return render(request, "inventarios/vision.html")


	def contacto(request):
		return render(request, "inventarios/contacto.html")


	# Funcio para ingresar usuarios y autenticar credenciales
	def ingresar(request):
		# Si el usuario accede via POST
		if request.method == "POST":
		    # Crea el formulario de autenticacion. Este requiere incluir el
		    # parametro (data=request.POST)
		    formulario = AuthenticationForm(data=request.POST)
		    # Validacion
		    if formulario.is_valid():
		        # Permite el ingreso al usuario
		        # Obtiene los datos del usuario de las variables del formulario
		        usuario = formulario.get_user()
		        # Ingresa en la pagina web usando la variable usuario como
		        # parametro
		        login(request, usuario)
		        return render(request, "inventarios/ingresoExitoso.html", {
		            "mensaje": "Usuario inició sesión exitosamente!!!!!"
		        })

		    # Si la validacion del formulario no es correcta, se retorna a la 
		    # pagina de inicio de sesion
		    else:
		        return render(request, "inventarios/ingresar.html", {
		            "formulario": formulario,
		            "message": "Upss. Algo salió mal. Su usuario o contraseña no son correctos.Vuelva a Intentar!",
		        })

		# Si el usuario accede via GET
		else:
		    # Crea y muestra el formulario de inicio de sesion
		    formulario = AuthenticationForm()
		    return render(request, "inventarios/ingresar.html", {
		        "formulario": formulario,
		    })


	# Funcion para cerrar sesion
	def salir_view(request):
		if request.method == "POST":
		    logout(request)
		    return render(request, "inventarios/index.html", {
		        # Imported from blog.models
		        "mensaje": "Sesión cerrada con éxito!",
		    })


	# Funcion temporal de verificacion de ingreso exitoso ##############################################################################
	def ingresoExitoso(request):
		return render(request, "inventarios/ingresoExitoso.html")
	####################################################################################################################################
	

16. CREATE THE PATHS TO THE WEBSITES OF THE REGISTERED USERS IN inventarios/urls.py

	# ...
		path("salir", views.salir_view, name="salir"),
		path("gerente", views.gerente, name="gerente"),
		path("almacenista", views.almacenista, name="almacenista"),
		path("directoroperativo", views.directoroperativo,
		     name="directoroperativo"),
		path("contratista", views.contratista, name="contratista"),
	]


17. ADD THE INITIAL VIEWS FOR EACH OF THE PATHS CREATED IN THE PREVIOUS POINT (16) IN inventarios/views.py

	# ...
	@login_required(login_url=ingresar)
	def gerente(request):
		usuario = CustomUser.objects.all()
		return render(request, "inventarios/gerente.html", {
		    'usuario': usuario,
		})


	@login_required(login_url=ingresar)
	def almacenista(request):
		usuario = CustomUser.objects.all()
		return render(request, "inventarios/almacenista.html", {
		    'usuario': usuario,
		})


	@login_required(login_url=ingresar)
	def directoroperativo(request):
		usuario = CustomUser.objects.all()
		return render(request, "inventarios/directoroperativo.html", {
		    'usuario': usuario,
		})


	@login_required(login_url=ingresar)
	def contratista(request):
		usuario = CustomUser.objects.all()
		return render(request, "inventarios/contratista.html", {
		    'usuario': usuario,
		})


18. CREATE THE INITIAL HTML FOR THE REGISTERED USERS WHERE THEY ARE GOING TO BE REDIRECTED ONCE THEY SIGN IN IN THE DIRECTORY inventarios/templates/inventarios/

	i. inventarios/templates/inventarios/ingresoExitoso.html (Will be updated later)
	
		{% extends "inventarios/layout.html" %}

		{% block title %}
			  Ingreso Exitoso
		{% endblock %}

		{% block main %}
			  <section id="b">
				{% if mensaje %}
				        <div class="message">{{ mensaje }}</div>
				        <br>
				{% endif %}
				<h2>Ingreso Exitoso</h2>
				<br><br>
				<!-- The following form is necesary to execute the action logout_view created in users/views.py -->
				<form action="{% url 'inventarios:salir' %}" method="post">
				    {% csrf_token %}
				    <input type="submit" value="Cerrar Sesión" class="logout" title="Log Out">
				</form>
			  </section>   
		{% endblock %}
		
		
		
	ii. inventarios/templates/inventarios/gerente.html (Will be updated later)
		
		{% extends "inventarios/layout.html" %}

		{% block title %}
			Reportes
		{% endblock %}

		{% block main %}
			  <section id="bflex">
				    <br>
				    <div class="floatLeft">
				          <div class="block">
				                
				          </div>
				          <div class="block">
				                
				          </div>
				    </div>
				    <div class="floatRight">
				          <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" fill="#FF7301" class="bi bi-person-circle" viewBox="0 0 16 16">
		  <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"/>
		  <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z"/>
		</svg>
				          <!-- El cargo del empleado se ajusta dinamicamente de acuerdo con quien haya iniciado sesion -->
				          <h3>Perfil:&nbsp;&nbsp;<u>{{ user.cargo_empleado }}</u></h3>
				          <br>
				          <!-- Se usa para mostrar el usuario cuando ha iniciado sesion -->
				          {% if user.is_authenticated %}
				                <h3>Usuario: {{ user.username }}</h3>
				          {% endif %}
				          <br>
				          <div class="centering logout">
				                <form action="{% url 'operaciones:redirecciongerente' %}" method="post">
				                      {% csrf_token %}
				                      <input type="submit" Value="Volver al Menú" class="logout" title="Volver al Menú">
				                </form>
				          </div>
				          <br>
				          <div class="centering logout">
				                <!-- Formulario necesario para ejecutar la vista salir_view en inventarios/views.py -->
				                <form action="{% url 'inventarios:salir' %}" method="post">
				                      {% csrf_token %}
				                      <input type="submit" value="Cerrar Sesión" class="logout" title="Cerrar Sesión">
				                </form>
				          </div>
				    </div>
				    <br><br>
			  </section>
		{% endblock %}
		
		
	iii. inventarios/templates/inventarios/almacenista.html (Will be updated later)
	
		{% extends "inventarios/layout.html" %}

		{% block title %}
			  Almacenista
		{% endblock %}

		{% block main %}
			  <section id="bflex">
				    <br>
				    <div class="floatLeft">
				          <div class="block">
				                <a href="{% url 'operaciones:nuevomaterial' %}">Entradas de Materia Prima</a>
				          </div>
				          <div class="block">
				                <a href="{% url 'operaciones:salidaalmacen' %}">Salidas de Inventario</a>
				          </div>
				          <div class="block">
				                <a href="{% url 'operaciones:solautsalida' %}">Autorizaciones</a>
				          </div>
				          <div class="block">
				                <a href="{% url 'operaciones:reportesinventario' %}">Reportes de Inventario</a>
				          </div>
				          <div class="block">
				                <a href="{% url 'operaciones:nuevoproveedor' %}">Ingresar Nuevo Proveedor</a>
				          </div>
				    </div>
				    <div class="floatRight">
				          <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" fill="#FF7301" class="bi bi-person-circle" viewBox="0 0 16 16">
		  <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"/>
		  <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z"/>
		</svg>
				          <!-- El cargo del empleado se ajusta dinamicamente de acuerdo con quien haya iniciado sesion -->
				          <h3>Perfil:&nbsp;&nbsp;<u>{{ user.cargo_empleado }}</u></h3>
				          <br>
				          <!-- Se usa para mostrar el usuario cuando ha iniciado sesion -->
				          {% if user.is_authenticated %}
				                <h3>Usuario: {{ user }}</h3>
				          {% endif %}
				          <br>
				          <div class="centering">
				                <!-- Formulario necesario para ejecutar la vista salir_view en inventarios/views.py -->
				                <form action="{% url 'inventarios:salir' %}" method="post">
				                      {% csrf_token %}
				                      <input type="submit" value="Cerrar Sesión" class="logout" title="Log Out">
				                </form>
				          </div>
				    </div>
				    <br><br>
			  </section>   
		{% endblock %}
	

	iv. inventarios/templates/inventarios/directoroperativo.html (Will be updated later)
		
		{% extends "inventarios/layout.html" %}

		{% block title %}
			  Director Operativo
		{% endblock %}

		{% block main %}
			  <section id="bflex">
				    <br>
				    <div class="floatLeft">
				          <div class="block">
				                <a href="{% url 'operaciones:reportesinventario' %}">Reportes de Inventario</a>
				          </div>
				          <div class="block">
				                <a href="{% url 'operaciones:solicitudmateriales' %}">Solicitud de Materias Primas</a>
				          </div>
				          <div class="block">
				                <a href="{% url 'operaciones:nuevoproyecto' %}">Nuevo Proyecto</a>
				          </div>
				    </div>
				    <div class="floatRight">
				          <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" fill="#FF7301" class="bi bi-person-circle" viewBox="0 0 16 16">
		  <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"/>
		  <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z"/>
		</svg>
				          <!-- El cargo del empleado se ajusta dinamicamente de acuerdo con quien haya iniciado sesion -->
				          <h3>Perfil:&nbsp;&nbsp;<u>{{ user.cargo_empleado }}</u></h3>
				          <br>
				          <!-- Se usa para mostrar el usuario cuando ha iniciado sesion -->
				          {% if user.is_authenticated %}
				                <h3>Usuario: {{ user }}</h3>
				          {% endif %}
				          <br>
				          <div class="centering">
				                <!-- Formulario necesario para ejecutar la vista salir_view en inventarios/views.py -->
				                <form action="{% url 'inventarios:salir' %}" method="post">
				                      {% csrf_token %}
				                      <input type="submit" value="Cerrar Sesión" class="logout" title="Log Out">
				                </form>
				          </div>
				    </div>
				    <br><br>
			  </section>   
		{% endblock %}
		

	v. inventarios/templates/inventarios/contratista.html (Will be updated later)
	
		{% extends "inventarios/layout.html" %}

		{% block title %}
			Contratistas
		{% endblock %}

		{% block main %}
			  <section id="bflex">
				    <br>
				    <div class="floatLeft">
				          <div class="block">
				                <a href="{% url 'operaciones:proyectoscontratista' %}">Proyectos</a>
				          </div>
				          <div class="block">
				                <a href="{% url 'operaciones:novedades' %}">Novedades Operativas</a>
				          </div>
				    </div>
				    <div class="floatRight">
				          <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" fill="#FF7301" class="bi bi-person-circle" viewBox="0 0 16 16">
		  <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"/>
		  <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z"/>
		</svg>
				          <!-- El cargo del empleado se ajusta dinamicamente de acuerdo con quien haya iniciado sesion -->
				          <h3>Perfil:&nbsp;&nbsp;<u>{{ user.cargo_empleado }}</u></h3>
				          <br>
				          <!-- Se usa para mostrar el usuario cuando ha iniciado sesion -->
				          {% if user.is_authenticated %}
				                <h3>Usuario: {{ user }}</h3>
				          {% endif %}
				          <br>
				          <div class="centering">
				                <!-- Formulario necesario para ejecutar la vista salir_view en inventarios/views.py -->
				                <form action="{% url 'inventarios:salir' %}" method="post">
				                      {% csrf_token %}
				                      <input type="submit" value="Cerrar Sesión" class="logout" title="Log Out">
				                </form>
				          </div>
				    </div>
				    <br><br>
			  </section>
		{% endblock %}
		

19. CUSTOMIZE THE FIELDS OF ALL MODELS IN ADMIN. THIS INCLUDE THE DISPLAYING OF MANY TO MANY FIELDS IN THE ADMIN

	i. Update inventarios/models.py
	
		from django.db import models
		from django.contrib.auth.models import User
		from django.contrib.auth.models import AbstractUser
		from django.db.models.fields.related import ManyToManyField

		# Create your models here.
		# Modelo modificado para usuarios en admin


		class CustomUser(AbstractUser):
			identificacion = models.BigIntegerField(
				default="0000000000")
			# Diccionario de las opciones de cargos para mostrar en admin
			cargos = [
				("Director General", "Director General"),
				("Director Operacional", "Director Operacional"),
				("Almacenista", "Almacenista"),
				("Contratista", "Contratista"),
				("NA", "No Asignado")
			]
			# choices toma los valores de la lista cargos (arriba declarada) y crea una
			# lista desplegable de los cargos en admin
			cargo_empleado = models.CharField(
				max_length=50, choices=cargos, default="NA")
			telefono_empleado = models.BigIntegerField(default="0000000000")
			correo_empleado = models.EmailField(default="ejemplo@ejemplo.com")


		# Usada para guardar registro de los movimientos de entrada o salida de materia
		# prima del almacén
		class Movimientos_Almacen (models.Model):
			cod_movimiento = models.IntegerField(primary_key=True)  # llave primaria
			# Diccionario de las opciones de cargos para mostrar en admin
			movimientos = [
				("En", "Entrada"),
				("Sa", "Salida"),
				("Na", "Sin Asignar Aún")
			]
			tipo_movimiento = models.CharField(
				max_length=8, choices=movimientos, default="Na")

			def __str__(self):
				return f"{self.cod_movimiento}"


		# Registro de proveedores
		class Proveedores (models.Model):
			codigo_proveedor = models.IntegerField(primary_key=True)  # llave primaria
			nombre_proveedor = models.CharField(max_length=50)
			direccion_proveedor = models.CharField(max_length=100)
			barrio_proveedor = models.CharField(max_length=50)
			ciudad_proveedor = models.CharField(max_length=50)
			telefono_proveedor = models.IntegerField()
			website_proveedor = models.CharField(max_length=50)
			email = models.EmailField(default="ejemplo@ejemplo.com")
			# Diccionario de las opciones disponibles de crédito para mostrar en admin
			credito = [
				("Si", "Si Maneja Crédito"),
				("No", "No Ofrece Crédito"),
			]
			# choices toma los valores de la lista cargos (arriba declarada) y crea una
			# lista desplegable de las opciones de crédito
			maneja_credito = models.CharField(
				max_length=20, choices=credito, default="No")

			def __str__(self):
				return f"{self.nombre_proveedor}"


		# Usada para registrar los ingresos de materias primas al almacén
		class Materia_prima (models.Model):
			codigo_producto = models.IntegerField(primary_key=True)  # llave primaria
			nombre_producto = models.CharField(max_length=100)
			numero_factura_compra = models.CharField(
				max_length=100, default="0000000000")
			cantidad = models.IntegerField(default="1")
			unidades = [
				("Un", "Unidad"), ("Lb", "Libras"), ("Kg", "Kilogramos"),
				("In", "Pulgadas"), ("Cm", "Centimetros"), ("Mt", "Metros"),
				("Pi", "Pies"), ("M2", "Metros Cuadrados"), ("M3", "Metros Cubicos"),
				("Lt", "Litros"), ("Ml", "Mililitros"), ("Gl", "Galones"),
				("1/16", "1/16 de Galón"), ("1/8", "1/8 de Galón"),
				("1/4", "1/4 de Galón"), ("1/2", "1/2 Galón"),
			]
			unidad_de_medida = models.CharField(
				max_length=15, choices=unidades, default="Un")
			precio = models.IntegerField()
			marca = models.CharField(max_length=100, null=True)
			# Muchas materias primas pueden tener muchos proveedores
			Proveedores_cod_proveedor = ManyToManyField(Proveedores)
			# Llave foranea
			cod_movimiento_ingreso = models.ForeignKey(
				Movimientos_Almacen, null=False, on_delete=models.CASCADE,
				default="0000000")

			# Para poder mostrar un campo many to many en el admin se usa una funcion
			# que obtenga la informacion como una cadena y la deje leer por la class
			# MateriaPrimaAdmin en inventarios/admin.py
			def Proveedor(self):
				return ', '.join([Proveedores.nombre_proveedor for Proveedores in self.Proveedores_cod_proveedor.all()])
			Proveedor.short_description = "Proveedores"


		# Usada cuando el empleado encargado de un proyecto solicita materia prima al
		# alamacén
		class ordenes_pedido_materiaprima (models.Model):
			codigo_orden_pedido = models.IntegerField(
				primary_key=True)  # llave primaria
			codigo_producto = models.ForeignKey(
				Materia_prima, null=False, on_delete=models.CASCADE)  # llave foranea
			cantidad_pedida = models.IntegerField()
			fecha_orden_pedido = models.DateTimeField(auto_now_add=True)
			# llave foranea
			empleado_solicitante = models.ForeignKey(
				CustomUser, null=False, on_delete=models.CASCADE, default="-------")


		# Registro de los proyectos que tiene la compañía
		class Proyectos (models.Model):
			codigo_proyecto = models.IntegerField(primary_key=True)  # llave primaria
			nombre_proyecto = models.CharField(max_length=100)
			direccion_proyecto = models.CharField(max_length=100)
			descripcion_proyecto = models.CharField(max_length=200)
			estado = [
				("Act", "Activo"),
				("Ter", "Terminado"),
				("Na", "No Asignado"),
			]
			estado_proyecto = models.CharField(
				max_length=12, choices=estado, default="Na")
			empleado_responsable = models.ForeignKey(
				CustomUser, null=False, on_delete=models.CASCADE)  # llave foranea

			def __str__(self):
				return f"{self.nombre_proyecto}"


		# Usada para registrar las salidas de material del almacén
		# Solamente puede haber una orden de salida por proyecto a la vez.
		# No se puede tener una orden de salida para varios proyectos
		class ordenes_salida_materiaprima (models.Model):
			codigo_orden_salida = models.IntegerField(
				primary_key=True)  # llave primaria
			codigo_producto = models.ForeignKey(
				Materia_prima, null=False, on_delete=models.CASCADE)  # llave foranea
			cantidad_entregada = models.IntegerField()
			fecha_entrega_materiaprima = models.DateTimeField(auto_now_add=True)
			proyecto_destino = models.ForeignKey(
				Proyectos, null=False, on_delete=models.CASCADE)  # llave foranea
			empleado_responsable = models.ForeignKey(
				CustomUser, null=False, on_delete=models.CASCADE)  # llave foranea
			# Muchos productos pueden tener muchos movimientos de almacén y viceversa
			cod_movimiento_salida = models.ForeignKey(
				Movimientos_Almacen, null=False, on_delete=models.CASCADE,
				default="00000000")


		# Registro de contratistas
		class Contratistas (models.Model):
			codigo_contratista = models.IntegerField(
				primary_key=True)  # llave primaria
			nombre_contratista = models.CharField(max_length=50)
			apellido_contratista = models.CharField(max_length=50)
			identificacion = models.IntegerField(default="000000000")
			direccion_contratista = models.CharField(max_length=100)
			correo_contratista = models.EmailField(default="ejemplo@ejemplo.com")
			telefono_contratista = models.IntegerField()
			especialidad_contratista = models.CharField(max_length=50)
			# Un contratista puede tener muchos proyectos asignados
			proyecto_asignacion = ManyToManyField(Proyectos)

			# Para poder mostrar un campo many to many en el admin se usa una funcion
			# que obtenga la informacion como una cadena y la deje leer por la class
			# MateriaPrimaAdmin en inventarios/admin.py
			 def proyectos_asignados(self):
				return ', '.join([Proyectos.nombre_proyecto for Proyectos in self.proyecto_asignacion.all()])
			proyectos_asignados.short_description = "Proyectos"


		ii. Update inventarios/admin.py
		
			from django.contrib import admin
			from .models import Materia_prima, Movimientos_Almacen, Proveedores
			from .models import ordenes_pedido_materiaprima
			from .models import ordenes_salida_materiaprima
			from .models import Proyectos, Contratistas
			from django.contrib.auth.admin import UserAdmin
			from .models import CustomUser


			# Modificar la vista por defecto de usuarios en admin
			class CustomUserAdmin(UserAdmin):

				# Listado de los campos a mostrar en admin.
				list_display = (
					'pk', 'username', 'identificacion', 'first_name', 'last_name',
					'is_staff', 'cargo_empleado', 'telefono_empleado', 'correo_empleado'
				)

				# campos para mostrar datos de los usuarios registrados
				fieldsets = (
					(None, {
						'fields': ('username', 'password')
					}),
					('Informacion Personal', {
						'fields': ('first_name', 'last_name', 'email')
					}),
					('Permisos', {
						'fields': (
						    'is_active', 'is_staff', 'is_superuser',
						    'groups', 'user_permissions'
						)
					}),
					('Fechas Importantes', {
						'fields': ('last_login', 'date_joined')
					}),
					('Informacion adicional', {
						'fields': ('identificacion', 'cargo_empleado',
						           'telefono_empleado')
					})
				)

				# Campos para agregar datos de nuevos usuarios
				add_fieldsets = (
					(None, {
						# Password1 y password2 requeridas para confirmacion de contrasena
						'fields': ('username', 'password1', 'password2')
					}),
					('Informacion Personal', {
						'fields': ('first_name', 'last_name', 'email')
					}),
					('Permisos', {
						'fields': (
						    'is_active', 'is_staff', 'is_superuser',
						    'groups', 'user_permissions'
						)
					}),
					('Fechas Importantes', {
						'fields': ('last_login', 'date_joined')
					}),
					('Informacion adicional', {
						'fields': ('identificacion', 'cargo_empleado',
						           'telefono_empleado')
					})
				)


			class MovimientosAlmacenAdmin(admin.ModelAdmin):
				list_display = (
					'cod_movimiento', 'tipo_movimiento'
				)


			class ProveedoresAdmin(admin.ModelAdmin):
				list_display = (
					'codigo_proveedor', 'nombre_proveedor', 'direccion_proveedor',
					'telefono_proveedor', 'website_proveedor', 'maneja_credito'
				)


			class MateriaPrimaAdmin(admin.ModelAdmin):
				list_display = (
					'codigo_producto', 'nombre_producto', 'numero_factura_compra',
					'cantidad', 'unidad_de_medida', 'precio', 'marca',
					'Proveedor', 'cod_movimiento_ingreso'
				)


			class OrdenesPedidoMateriaAdmin(admin.ModelAdmin):
				list_display = (
					'codigo_orden_pedido', 'codigo_producto', 'cantidad_pedida',
					'fecha_orden_pedido', 'empleado_solicitante'
				)


			# Vista modificada del modelo proyectos en el admin
			class ProyectosAdmin(admin.ModelAdmin):
				list_display = (
					'codigo_proyecto', 'nombre_proyecto', 'direccion_proyecto',
					'descripcion_proyecto', 'estado_proyecto', 'empleado_responsable',
				)


			class OrdenesSalidaMateriaPrimaAdmin(admin.ModelAdmin):
				list_display = (
					'codigo_orden_salida', 'codigo_producto', 'cantidad_entregada',
					'fecha_entrega_materiaprima', 'proyecto_destino',
					'empleado_responsable'
				)


			# Vista modificada del modelo proyectos en el admin
			class ContratistasAdmin(admin.ModelAdmin):
				list_display = (
					'codigo_contratista', 'nombre_contratista', 'direccion_contratista',
					'correo_contratista', 'telefono_contratista',
					'especialidad_contratista', 'proyectos_asignados'
				)


			# Registros Modificados
			admin.site.register(CustomUser, CustomUserAdmin)
			admin.site.register(Movimientos_Almacen, MovimientosAlmacenAdmin)
			admin.site.register(Proveedores, ProveedoresAdmin)
			admin.site.register(Materia_prima, MateriaPrimaAdmin)
			admin.site.register(ordenes_pedido_materiaprima, OrdenesPedidoMateriaAdmin)
			admin.site.register(Proyectos, ProyectosAdmin)
			admin.site.register(ordenes_salida_materiaprima,
						        OrdenesSalidaMateriaPrimaAdmin)
			admin.site.register(Contratistas, ContratistasAdmin)



	iii. Make migrations
	
		python3 manage.py makemigrations
		python3 manage.py migrate
	

NOTA: Si las migraciones no surten efecto despues de hacer cambios en llaves principales, llaves foraneas, cambios en las visualizaciones de modelos en admin, cambios en la visualizacion de campos de muchos a muchos, se puede corregir esto borrando todas las migraciones menos el archivo __init__.py y luego borrando la base de datos. Posterior a esto se vuelven a hacer las migraciones.
	
	
20. UPDATE inventarios/views.py TO INCLUDE THE @login_required DECORATOR IN THE REQUIRED VIEWS AND REDIRECT LOGGED IN USERS TO THEIR SPECIF WEB PAGES
	
	from django.shortcuts import render
	# Importa para crear el formulario de autenticacion de usuarios.
	from django.contrib.auth.forms import AuthenticationForm, UsernameField
	# Importa para usar las funciones de log in y log out.
	from django.contrib.auth import login, logout
	from django.contrib.auth.decorators import login_required
	# Importa el modelo de usuarios para despues enviarlo como argumento a las
	# paginas en que se requiera
	from .models import CustomUser


	# Create your views here.
	def index(request):
		return render(request, "inventarios/index.html")


	def mision(request):
		return render(request, "inventarios/mision.html")


	def vision(request):
		return render(request, "inventarios/vision.html")


	def contacto(request):
		return render(request, "inventarios/contacto.html")


	# Funcio para ingresar usuarios y autenticar credenciales
	def ingresar(request):
		# Si el usuario accede via POST
		if request.method == "POST":
		    # Crea el formulario de autenticacion. Este requiere incluir el
		    # parametro (data=request.POST)
		    formulario = AuthenticationForm(data=request.POST)
		    # Validacion
		    if formulario.is_valid():
		        # Permite el ingreso al usuario
		        # Obtiene los datos del usuario de las variables del formulario
		        usuario = formulario.get_user()
		        # Ingresa en la pagina web usando la variable usuario como
		        # parametro
		        if usuario.pk == 1:  # Perfil del Gerente
                login(request, usuario)
                # Como solo se redirecciona se usa redirect. Esto evita que se
                # tenga que volver a iniciar sesion en caso de recargar la
                # pagina
                return redirect("inventarios:gerente")
            # Ingresa al perfil del almacenista
            elif usuario.pk == 2:
                login(request, usuario)
                # Como solo se redirecciona se usa redirect. Esto evita que se
                # tenga que volver a iniciar sesion en caso de recargar la
                # pagina
                return redirect("inventarios:almacenista")
            # Ingresa al perfil del director operativo
            elif usuario.pk == 3:
                login(request, usuario)
                # Como solo se redirecciona se usa redirect. Esto evita que se
                # tenga que volver a iniciar sesion en caso de recargar la
                # pagina
                return redirect("inventarios:directoroperativo")
                # Ingresa al perfil de cada contratista
            else:
                # Como solo se redirecciona se usa redirect. Esto evita que se
                # tenga que volver a iniciar sesion en caso de recargar la
                # pagina
                login(request, usuario)
                return redirect("inventarios:contratista")

		    # Si la validacion del formulario no es correcta, se retorna a la 
		    # pagina de inicio de sesion
		    else:
		        return render(request, "inventarios/ingresar.html", {
		            "formulario": formulario,
		            "mensaje": "Upss. Algo salió mal. Su usuario o contraseña no son correctos.Vuelva a Intentar!",
		        })

		# Si el usuario accede via GET
		else:
		    # Crea y muestra el formulario de inicio de sesion
		    formulario = AuthenticationForm()
		    return render(request, "inventarios/ingresar.html", {
		        "formulario": formulario,
		    })


	# Funcion para cerrar sesion
	def salir_view(request):
		if request.method == "POST":
		    logout(request)
		    return render(request, "inventarios/index.html", {
		        "mensaje": "Sesión cerrada con éxito!",
		    })
		    

	@login_required(login_url=ingresar)
	def gerente(request):
		usuario = CustomUser.objects.all()
		return render(request, "inventarios/gerente.html", {
		    'usuario': usuario,
		})


	@login_required(login_url=ingresar)
	def almacenista(request):
		usuario = CustomUser.objects.all()
		return render(request, "inventarios/almacenista.html", {
		    'usuario': usuario,
		})


	@login_required(login_url=ingresar)
	def directoroperativo(request):
		usuario = CustomUser.objects.all()
		return render(request, "inventarios/directoroperativo.html", {
		    'usuario': usuario,
		})


	@login_required(login_url=ingresar)
	def contratista(request):
		usuario = CustomUser.objects.all()
		return render(request, "inventarios/contratista.html", {
		    'usuario': usuario,
		})

	
21. CREATE THE APP TO CONTROL ALL OPERATIONS OF USERS IN THEIR PROFILES

	python3 manage.py startapp operaciones
	

22. INCLUDE THE NEW APP IN Proyecto_JYJSAS/settings.py

	# ...
	
	# Application definition

	INSTALLED_APPS = [
		'inventarios',
		'operaciones',
		'django.contrib.admin',
		'django.contrib.auth',
		'django.contrib.contenttypes',
		'django.contrib.sessions',
		'django.contrib.messages',
		'django.contrib.staticfiles',
	]

	MIDDLEWARE = [
		# ...	
		

23. CREATE THE PATH FOR THE operaciones APPLICATION IN Proyecto_JYJSAS/urls.py AND UPDATE THE IMPORTS

	# ...
	from django.contrib import admin
	from django.urls import path, include
	from django.contrib.staticfiles.urls import staticfiles_urlpatterns
	from django.conf.urls.static import static
	from django.conf import settings
	# Importa el archivo views de inventarios para redireccionar con el
	# path("", views.index, name="index") a la url http://127.0.0.1:8000
	from inventarios import views


	urlpatterns = [
		path('admin/', admin.site.urls),
		# Path para la aplicacion inventarios
		path('inventarios/', include('inventarios.urls')),
		# Redirecciona como pagina principal a la url http://127.0.0.1:8000/
		path("", views.index, name="index"),
		# Path para la aplicacion operaciones
		path('operaciones/', include('operaciones.urls'))
	]
	
	
24. CREATE THE FILE operaciones/urls.py INSIDE operaciones DIRECTORY, AND ADD THE URLS FOR THE operaciones APPLICATION, AS WELL AS THE NAMESPACE

	from django.urls import path
	from . import views


	# Namespace para evitar conflicto entre urls llamadas igual pero en diferentes
	# aplicaciones
	app_name = "operaciones"

	urlpatterns = [
		# Paginas gerente
		path("", views.index, name="reportesinventario"),
		path("nuevomaterial.html", views.nuevomaterial, name="nuevomaterial"),
		path("nuevoproveedor", views.nuevoproveedor, name="nuevoproveedor"),
		path("nuevoproyecto", views.nuevoproyecto, name="nuevoproyecto"),
		path("nuevoempleado", views.nuevoempleado, name="nuevoempleado"),
		path("autsalidamaterial", views.autsalidamaterial,
		     name="autsalidamaterial"),
		path("eliminarcontratista", views.eliminarcontratista,
		     name="eliminarcontratista"),
		path("eliminarproducto", views.eliminarproducto, name="eliminarproducto"),
		path("eliminarproveedor", views.eliminarproveedor,
		     name="eliminarproveedor"),
		path("redirecciongerente", views.redirecciongerente,
		     name="redirecciongerente"),  # Redirecciona al menu del gerente

		# Paginas almacenista
		path("almacenistanuevomaterial", views.almacenistanuevomaterial,
		     name="almacenistanuevomaterial"),
		path("salidaalmacen", views.salidaalmacen, name="salidaalmacen"),
		path("solautsalida", views.solautsalida, name="solautsalida"),
		path("almacenistareporteinventarios", views.almacenistareporteinventarios,
		     name="almacenistareporteinventarios"),
		path("redireccionalmacenista", views.redireccionalmacenista,
		     name="redireccionalmacenista"),  # Redirecciona al menu almacenista

		# Paginas director operativo
		path("operativoreporteinventarios", views.operativoreporteinventarios,
		     name="operativoreporteinventarios"),
		path("solicitudmateriales", views.solicitudmateriales,
		     name="solicitudmateriales"),
		path("operativonuevoproyecto", views.operativonuevoproyecto,
		     name="operativonuevoproyecto"),
		path("redireccionoperativo", views.redireccionoperativo,
		     name="redireccionoperativo"),  # Redirecciona al menu del operativo

		# Paginas contratistas
		path("proyectoscontratista", views.proyectoscontratista,
		     name="proyectoscontratista"),
		path("novedades", views.novedades, name="novedades"),
		path("redireccioncontratista", views.redireccioncontratista,
		     name="redireccioncontratista"),  # Redirecciona al menu de contratistas
	]



25. IN operaciones/views.py INCLUDE THE INITIAL VIEWS FOR THE operaciones APPLICATION

	from django.shortcuts import render
	from django.contrib.auth.decorators import login_required


	# Create your views here.
	# Funcion para acceder a la pagina de reportes gerente
	@login_required(login_url="/inventarios/ingresar")
	def index(request):
		return render(request, "operaciones/reportesinventario.html")


	""" ################## INICIO FUNCIONES PROPIAS DEL GERENTE ################"""


	# Funcion para acceder a la pagina de ingreso de materias primas al sistema
	# gerente
	@login_required(login_url="/inventarios/ingresar")
	def nuevomaterial(request):
		return render(request, "operaciones/nuevomaterial.html")


	# Funcion para ingresar nuevos proveedores gerente
	@login_required(login_url="/inventarios/ingresar")
	def nuevoproveedor(request):
		return render(request, "operaciones/nuevoproveedor.html")


	# Funcion para ingresar nuevos proyectos gerente
	@login_required(login_url="/inventarios/ingresar")
	def nuevoproyecto(request):
		return render(request, "operaciones/nuevoproyecto.html")


	# Funcion para ingresar nuevos empleados gerente
	@login_required(login_url="/inventarios/ingresar")
	def nuevoempleado(request):
		return render(request, "operaciones/nuevoempleado.html")


	# Funcion para autorizar la salida de material gerente
	@login_required(login_url="/inventarios/ingresar")
	def autsalidamaterial(request):
		return render(request, "operaciones/autsalidamaterial.html")


	# Funcion para eliminar contratistas de la base de datos gerente
	@login_required(login_url="/inventarios/ingresar")
	def eliminarcontratista(request):
		return render(request, "operaciones/eliminarcontratista.html")


	# Funcion para eliminar productos de la base de datos gerente
	@login_required(login_url="/inventarios/ingresar")
	def eliminarproducto(request):
		return render(request, "operaciones/eliminarproducto.html")


	# Funcion para eliminar proveedores gerente
	@login_required(login_url="/inventarios/ingresar")
	def eliminarproveedor(request):
		return render(request, "operaciones/eliminarproveedor.html")


	# Funcion para redireccionar al gerente al menu propio
	@login_required(login_url="/inventarios/ingresar")
	def redirecciongerente(request):
		return render(request, "inventarios/gerente.html")


	""" ################ INICIO FUNCIONES PROPIAS DEL ALMACENISTA ##############"""


	# Funcion para que el almacenista ingrese nuevo material a la base de datos
	@login_required(login_url="/inventarios/ingresar")
	def almacenistanuevomaterial(request):
		return render(request, "operaciones/almacenistanuevomaterial.html")


	# Funcion para registrar salidas de material del almacen
	@login_required(login_url="/inventarios/ingresar")
	def salidaalmacen(request):
		return render(request, "operaciones/salidaalmacen.html")


	# Funcion para solicitar autorizaciones de salida de materias de almacen
	@login_required(login_url="/inventarios/ingresar")
	def solautsalida(request):
		return render(request, "operaciones/solautsalida.html")


	# Funcion para generar reportes al almacenista
	@login_required(login_url="/inventarios/ingresar")
	def almacenistareporteinventarios(request):
		return render(request, "operaciones/almacenistareporteinventarios.html")


	# Funcion para redireccionar al almacenista al menu propio
	@login_required(login_url="/inventarios/ingresar")
	def redireccionalmacenista(request):
		return render(request, "inventarios/almacenista.html")


	""" ########### INICIO FUNCIONES PROPIAS DEL DIRECTOR OPERACIONAL ##########"""


	# Funcion del director operativo para solicitar materiales para obras
	@login_required(login_url="solicitudmateriales")
	def operativoreporteinventarios(request):
		return render(request, "operaciones/operativoreporteinventarios.html")


	# Funcion del director operativo para solicitar materiales para obras
	@login_required(login_url="solicitudmateriales")
	def solicitudmateriales(request):
		return render(request, "operaciones/solicitudmateriales.html")


	# Funcion del director operativo para solicitar materiales para obras
	@login_required(login_url="solicitudmateriales")
	def solicitudmateriales(request):
		return render(request, "operaciones/solicitudmateriales.html")


	# Funcion para mostrar los proyectos a los que esta asignado un contratista
	@login_required(login_url="/inventarios/ingresar")
	def operativonuevoproyecto(request):
		return render(request, "operaciones/operativonuevoproyecto.html")


	# Funcion para redireccionar al director operacional al menu propio
	@login_required(login_url="/inventarios/ingresar")
	def redireccionoperativo(request):
		return render(request, "inventarios/directoroperativo.html")


	""" ############# INICIO FUNCIONES PROPIAS DE lOS CONTRATISTAS #############"""


	# Funcion para mostrar los proyectos a los que esta asignado un contratista
	@login_required(login_url="/inventarios/ingresar")
	def proyectoscontratista(request):
		return render(request, "operaciones/proyectoscontratista.html")


	# Funcion del contratista para reportar novedades
	@login_required(login_url="/inventarios/ingresar")
	def novedades(request):
		return render(request, "operaciones/novedades.html")


	# Funcion para redireccionar al contratista al menu propio
	@login_required(login_url="/inventarios/ingresar")
	def redireccioncontratista(request):
		return render(request, "inventarios/contratista.html")



26. CREATE THE operaciones/templates/operaciones DIRECTORY AND INCLUDE THE FOLLOWING HTML FILES IN IT. EACH FILE WILL INCLUDE THE APROPRIATE FORM THAT WILL INTRODUCE DATA INTO THE DATABASE.
	
	i. almacenistanuevomaterial.html
	
	ii. almacenistareporteinventarios.html
	
	iii. autsalidamaterial.html
	
	iv. eliminarcontratista.html
	
	v. eliminarproducto.html
	
	vi. eliminarproveedor.html
	
	vii. novedades.html
	
	viii. nuevoempleado.html
	
	ix. nuevomaterial.html
	
	x. nuevoproveedor.html
	
	xi. nuevoproyecto.html
	
	xii. operativonuevoproyecto.html
	
	xiii. operativoreporteinventarios.html
	
	xiv. proyectoscontratista.html
	
	xv. reportesinventario.html
	
	xvi. salidaalmacen.html
	
	xvii. solautsalida.html
	
	xviii. solicitudmateriales



	
NOTAS PARA REALIZAR EN EL PROYECTO:


-1. Crear el formulario para poder ingresar nuevos contratistas. El formato debe diligenciar tanto el modelo CustomerUser, como el modelo Contratistas en admin.
0. Hacer que el acceso de contratistas funcione y le muestre unicamente la informacion del contratista que ha iniciado sesion.
1. Hacer que el letrero de error o exitoso desaparezcan al actualizar la pagina y agregar el boton de remover ese letrero
2. El campo unidad mínima se debe calcular para emitir la alarma de reabastecimiento.
3. El campo cantidad en almacen se debe calcular para mostrar en los diferentes formularios
4. Los codigos de movimiento se generan automaticamente en el formulario que se le va a presentar al usuario. Se deben autogenerar y solamente piden si es ingreso o salida de material. Utiliza la class Movimientos_Almacen.
5. En el formulario de cuando se van a ingresar o entregar elementos, colocar varios espacios, de tal manera que se puedan atar muchos productos a un solo movimiento.
6, Verificar cómo asignar contraseñas a cada usuario y no que sea la misma del administrador Django Tutorial # 20 - Saving Users
7. Crear los html para la aplicacion inventarios
8. Completar el formulario de contacto y hacer que se reciban correos de contacto en la cuenta de practica
9. Crear el modulo para imprimir html y excel
10. Hacer que los nombres de los contratistas y proveedores sean unicos en los modelo para que al ingresar uno de ellos nuevo, no deje repetir nombres ni llaves primarias en las bases de datos.
11. Hacer que se muestren los campos muchos a muchos en los formularios de las paginas web.



